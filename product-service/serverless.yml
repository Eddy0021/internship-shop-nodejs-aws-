service: shop-nodejs-aws

frameworkVersion: "3"

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: eu-north-1
  iamRoleStatements:
  - Effect: "Allow"
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: "arn:aws:dynamodb:${env:REGION}:${env:ACCOUNT_ID}:table/products"
  - Effect: "Allow"
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: "arn:aws:dynamodb:${env:REGION}:${env:ACCOUNT_ID}:table/stock"
  - Effect: "Allow"
    Action:
      - sns:Publish
    Resource: "arn:aws:sns:${env:REGION}:${env:ACCOUNT_ID}:MyCustomTopic"
  environment:
    PRODUCTS_TABLE: ${env:PRODUCTS_TABLE}
    STOCK_TABLE: ${env:STOCK_TABLE}

functions:
  getProducts:
    handler: handlers/getProducts.getProductsHandler
    events:
      - httpApi:
          method: GET
          path: /products        
    url:
      cors: true
    
  getProduct:
    handler: handlers/getProduct.getProductHandler
    events:
      - httpApi:
          method: GET
          path: /products/{productId}
    url:
      cors: true
  createProduct:
    handler: handlers/createProduct.createProductHandler
    events:
      - httpApi:
          method: POST
          path: /products
    url:
      cors: true
  catalogBatchProcess:
    handler: handlers/catalogBatchProcess.catalogBatchProcessHandler
    events:
      - sqs:
          arn: 
            Fn::GetAtt: [catalogItemsQueue, Arn]
          batchSize: 5

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table     
      Properties:
        TableName: ${env:PRODUCTS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    StockTable:
      Type: AWS::DynamoDB::Table     
      Properties:
        TableName: ${env:STOCK_TABLE}
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    
    catalogItemsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "catalogItemsQueue"

    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: MyCustomTopic

    productSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_EMAIL}
        Protocol: email
        TopicArn:
          Ref: createProductTopic

plugins:
  - serverless-esbuild
  - serverless-dotenv-plugin